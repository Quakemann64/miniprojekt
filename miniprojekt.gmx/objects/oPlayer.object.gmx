<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerBelly</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayermask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Declarations


// Build-in variables ***********************************************************

image_speed=0;
image_angle=random(360);



// Animations *******************************************************************

can_move     = 1;                                                                //Check if player can move
can_move2    = 1;                                                                //Additional check (for cutscenes)
spd          = 3;                                                                //Movement speed
mass         = 700;                                                              //Mass (weight)
f_index      = 0;                                                                //Legs animation
f_spd        = 0.15;                                                             //Default animation speed
b_angle      = image_angle;                                                      //Body angle
h_angle      = image_angle;                                                      //Head angle
s_play       = 1;                                                                //Footsptesps 
can_shoot    = 1;                                                                //Check for shoot
can_shoot2   = 1;                                                                //Check for special ability
can_shootN   = 1;                                                                //Special check for shooting
reload       = 20;                                                               //Reloading timer
reload2      = 0;                                                                //Control grenade distance
is_reloading = 0;                                                                //Control reloading
timer_reload = 0;                                                                //Reload time
accuray      = 6;                                                                //For spray effect

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

if (can_move = 1 &amp;&amp; can_move2 = 1) 
   {
// Split vector to fragments ***************************************************************
h_spd = 0;                                                                                 // Horizontal fragment
v_spd = 0;                                                                                 // Vertical fragment

// Check for input           ***************************************************************
if (keyboard_check(ord("W"))) {v_spd -= spd;}
if (keyboard_check(ord("S"))) {v_spd += spd;}
if (keyboard_check(ord("D"))) {h_spd += spd;}
if (keyboard_check(ord("A"))) {h_spd -= spd;}


// Horizontal collisions    ****************************************************************
for (i = abs(h_spd); i &gt; 0; i --;)
    {
    move_check = (sign(h_spd) * i);                                                         // Get sign of clausula
    
    if (!place_meeting(x + move_check, y,     parWall)) {x += move_check; break;}            
    if (!place_meeting(x + move_check, y - i, parWall)) {y -= (i / 2);}
    if (!place_meeting(x + move_check, y + i, parWall)) {y += (i / 2);}  
    }
    
// Verical collisions       ****************************************************************
for (i = abs(v_spd); i &gt; 0; i -= 1;)
    {
    move_check = sign(v_spd) * i;                                                           // Get sign of clausula
    
    if (!place_meeting(x , y +   move_check, parWall)) {y += move_check; break;}
    if (!place_meeting(x - i,y + move_check, parWall)) {x -= (i / 2);}
    if (!place_meeting(x + i,y + move_check, parWall)) {x += (i / 2);}
    }

// If we are moving, animate legs and play footsteps ***************************************
if (x = xprevious &amp;&amp; y = yprevious)
    {
    f_index = 0;                                                                           // Start playing footsteps again (loop[array_lenght] = 0)
    if (!s_play) {audio_stop_sound(sndFootsteps);}
    
    s_play = 1;                                                                            // Play footsteps
    
    }
else
    {
    f_index += f_spd;                                                                      // Increase footstep sound index
    if (f_index &gt; 6.5) {f_index = -0.5;}                                                   // On target point descrease index
    if (s_play)
        {
        audio_play_sound(sndFootsteps, 0, true);                                          // Play footsteps looped
        s_play = false;
        }
    }

// Rotate toward mouse ********************************************************************
dd = ((((point_direction(x,y,mouse_x,mouse_y) - h_angle) mod 360) + 540) mod 360) - 180;  //Get head rotation
h_angle += min(abs(dd), 10) * sign(dd);  
dd = ((((h_angle - b_angle) mod 360) + 540) mod 360) - 180;                               // Get the body rotation
ts = (abs(dd) / 6);                                                                       // Set ts 
if (abs(dd) &lt; ts) {b_angle = h_angle} else {b_angle += sign(dd) * ts;}                    // Rotate body



   }
   
   

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shooting


if (can_move &amp;&amp; can_move2)
{
if mouse_check_button(mb_left)
    {
    if (can_shoot &amp;&amp; can_shootN)
        {
        
        // Calculate variables ************************************************************************************       
        can_shoot               = 0;                                                //Reload
        is_reloading            = 1;                                                //Set reloading
        timer_reload            = reload;                                           //Fire ot up
        mod_dif                 = (b_angle + (accuray/2) - random(accuray));        //Get accuray
        bullet_xx               = x + lengthdir_x(20, mod_dif);                     // Get accuray vertex, x part 
        bullet_yy               = y + lengthdir_y(20, mod_dif);                     // Get accuray vertex, y part 

       
        
         
          
        // Spawn instances ****************************************************************************************
        audio_play_sound(snd_GunShoot_Pistol, 0, false);      
        instance_create(bullet_xx, bullet_yy, oFlash);                     
        with (instance_create(bullet_xx,bullet_yy,oBullet))        
        {
        dir = mod_dif;                                      
        }
        
        with (instance_create(x + lengthdir_x(18, b_angle), y + lengthdir_y(18, b_angle), oCasing))
            {
            image_index = 0;
            direction = (other.b_angle + 90) - 15 + random(30);
            image_angle = direction - 90;
            }
            

            
            
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reload


if (is_reloading)
   {
    if (timer_reload &gt; 0)
       {
        timer_reload --;
       }
       else {is_reloading = 0; can_shoot = 1;}
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self

//Draw legs + shadow ******************************************************************************************** 
draw_sprite_ext(sprite_index, f_index, x - 2, y + 2, image_xscale, image_yscale, h_angle, c_black, 0.5);
draw_sprite_ext(sprite_index, f_index, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);

//Draw body + shadow ********************************************************************************************
draw_sprite_ext(sPlayerHead, 1, x - 5, y + 5, image_xscale, image_yscale, b_angle, c_black, 0.5);
draw_sprite_ext(sPlayerHead, 1, x, y, image_xscale, image_yscale, b_angle, image_blend, image_alpha);

//Draw head + shadow *********************************************************************************************
draw_sprite_ext(sPlayerHead, 0, x - 5, y + 5, image_xscale, image_yscale, h_angle, c_black, 0.3);
draw_sprite_ext(sPlayerHead, 0, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,8</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
